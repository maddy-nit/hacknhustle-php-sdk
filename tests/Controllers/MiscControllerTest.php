<?php

declare(strict_types=1);

/*
 * HackNHustleIONDIDLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace HackNHustleIONDIDLib\Tests\Controllers;

use Core\TestCase\TestParam;
use HackNHustleIONDIDLib\Controllers\MiscController;
use HackNHustleIONDIDLib\Exceptions;
use HackNHustleIONDIDLib\Models;

class MiscControllerTest extends BaseTestController
{
    /**
     * @var MiscController MiscController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getMiscController();
    }

    public function testCreateDid()
    {
        // Perform API call
        try {
            self::$controller->createDid();
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testResolveDid()
    {
        // Parameters for the API call
        $did = 'did:ion:EiAtV0HmXmtvY-XXOIuK0Xbg8BpFA_r6fLsmiNVY_8UvQg';

        // Perform API call
        try {
            self::$controller->resolveDid($did);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testVerifySign()
    {
        // Parameters for the API call
        $signature = 'eyJhbGciOiJFUzI1NksifQ.eyJNb2JpbGUgTnVtYmVyIjoiOTU0MDY2NzU3NSJ9.Y8UXYDPv77PYvyxpSkhFtyH7kHqrU1aNwlgpHHksoEBCpXHa3XSL8-WZHSRRO9X0DFjBfDTzNrMsSkXITV8tPA';
        $body = TestParam::object(
            "{\r\n  \"public_key\": {\r\n    \"kty\": \"EC\",\r\n    \"crv\": \"secp256k1\",\r" .
            "\n    \"x\": \"pUC_rt64xNaJ8scD3LJnjU_CCN-Z1zQ2tVuIGsJzH4M\",\r\n    \"y\": \"uTTM0" .
            "Pf_3paUiQXM3eCp-WdAkfY17Xr87S3G6ZDHI7s\"\r\n  }\r\n}",
            Models\VerifySignRequest::class
        );

        // Perform API call
        try {
            self::$controller->verifySign($signature, $body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testCreateSign()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"message\": {\r\n    \"Mobile Number\": \"9540667575\"\r\n  },\r\n  \"priv" .
            "ate_key\": {\r\n    \"kty\": \"EC\",\r\n    \"crv\": \"secp256k1\",\r\n    \"d\": " .
            "\"IXoW0oPYOuL8byFiiRlQMlYAhs-01e1iqiPLVqY9ua8\",\r\n    \"x\": \"1GOsFpNCK9ELo-tim3" .
            "YletR0Iw-nXvt43Yo39HdZueU\",\r\n    \"y\": \"Ht_gMpAqXoWej7qRmuDEYF3xJBwIGo0H4YtDuH" .
            "X4iNE\"\r\n  }\r\n}",
            Models\CreateSignRequest::class
        );

        // Perform API call
        try {
            self::$controller->createSign($body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testSignatureParser()
    {
        // Parameters for the API call
        $signature = 'eyJhbGciOiJFUzI1NksifQ.eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sInR5cGUiOlsiVmVyaWZpYWJsZVByZXNlbnRhdGlvbiJdLCJ2ZXJpZmlhYmxlQ3JlZGVudGlhbCI6W3siQGNvbnRleHQiOlsiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy9leGFtcGxlcy92MSJdLCJpZCI6Imh0dHA6Ly9leGFtcGxlLmVkdS9jcmVkZW50aWFscy8xODcyIiwidHlwZSI6WyJWZXJpZmlhYmxlQ3JlZGVudGlhbCIsIkRyaXZpbmdMaWNlbnNlQ3JlZGVudGlhbCJdLCJpc3N1ZXIiOiJHb3Zlcm5tZW50IE9mIEluZGlhIiwiaXNzdWFuY2VEYXRlIjoiMjAxMC0wMS0wMVQxOToyMzoyNFoiLCJjcmVkZW50aWFsU3ViamVjdCI6eyJpZCI6ImRpZDpleGFtcGxlOmViZmViMWY3MTJlYmM2ZjFjMjc2ZTEyZWMyMSIsIkxpY2Vuc2UiOnsidHlwZSI6IkRyaXZpbmcgTGljZW5zZSIsIkRMTnVtYmVyIjoiVVBBQkhJU0hFSzE2QVg2NTM5In19LCJwcm9vZiI6eyJ0eXBlIjoiRWQyNTUxOVNpZ25hdHVyZTIwMTgiLCJjcmVhdGVkIjoiMjAyMC0wMi0wM1QxNzoyMzo0OVoiLCJqd3MiOiJleUpoYkdjaU9pSkZaRVJUUVNJc0ltSTJOQ0k2Wm1Gc2MyVXNJbU55YVhRaU9sc2lZalkwSWwxOS4uQVVRM0FKMjNXTTV2TU9XTnRZS3VxWkJla1JBT1VpYk9NSDlYdXZPZDM5bXkxc08tWDlSNFF5QVhMRDJvc3Bzc0x2SXV3bVFWaEphLUYweE1Pbmt2QmciLCJwcm9vZlB1cnBvc2UiOiJhc3NlcnRpb25NZXRob2QiLCJ2ZXJpZmljYXRpb25NZXRob2QiOiJodHRwczovL2V4YW1wbGUuZWR1L2lzc3VlcnMva2V5cy8xIn19XSwiaWQiOiJlYmM2ZjFjMiIsImhvbGRlciI6ImRpZDpleGFtcGxlOjc1NjRjYjljLTE2NWMtNDg1Ny1hODg3LWJmYzI0NjBhZjg2NyIsInByb29mIjp7InR5cGUiOiJFZDI1NTE5U2lnbmF0dXJlMjAxOCIsImNyZWF0ZWQiOiIyMDE5LTAyLTAzVDE3OjIzOjQ5WiIsImNoYWxsZW5nZSI6IjEyZWMyMSIsImp3cyI6ImV5SmhiR2NpT2lKRlpFUlRRU0lzSW1JMk5DSTZabUZzYzJVc0ltTnlhWFFpT2xzaVlqWTBJbDE5Li5aTzRMa3E4LWZPcnVFNG9VdnVNYXhlcEdYLXZMRDJnUHlOSXN6LWlBN1gwdHpDM185NmRqYUJZRHh4bDZ3RDF4S3J4MGg2ME5qSTlpOXBfTXhvWGtEUSIsInByb29mUHVycG9zZSI6ImF1dGhlbnRpY2F0aW9uIiwidmVyaWZpY2F0aW9uTWV0aG9kIjoiaHR0cHM6Ly9leGFtcGxlLmVkdS9pc3N1ZXJzL2tleXMvMSJ9fQ.OmnNiyn4eftFaC56eqevajBfmvaPt26GQKMOwFW0aed6Idb7ibdbgY_WRd8ygAZAgj83Onk5UEUpt4f4IHiRpA';

        // Perform API call
        try {
            self::$controller->signatureParser($signature);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testJsonCompare()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"json_first\": {\r\n    \"@context\": [\r\n      \"https://www.w3.org/2018" .
            "/credentials/v1\",\r\n      \"https://www.w3.org/2018/credentials/examples/v1\"\r\n" .
            "    ],\r\n    \"type\": [\r\n      \"VerifiablePresentation\"\r\n    ],\r\n    \"ve" .
            "rifiableCredential\": [\r\n      {\r\n        \"@context\": [\r\n          \"https:" .
            "//www.w3.org/2018/credentials/v1\",\r\n          \"https://www.w3.org/2018/credenti" .
            "als/examples/v1\"\r\n        ],\r\n        \"id\": \"http://example.edu/credentials" .
            "/1872\",\r\n        \"type\": [\r\n          \"VerifiableCredential\",\r\n         " .
            " \"DrivingLicenseCredential\"\r\n        ],\r\n        \"issuer\": \"Government Of " .
            "India\",\r\n        \"issuanceDate\": \"2010-01-01T19:23:24Z\",\r\n        \"creden" .
            "tialSubject\": {\r\n          \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\"," .
            "\r\n          \"License\": {\r\n            \"type\": \"Driving License\",\r\n     " .
            "       \"DLNumber\": \"UPABHISHEK16AX6539\"\r\n          }\r\n        },\r\n       " .
            " \"proof\": {\r\n          \"type\": \"Ed25519Signature2018\",\r\n          \"creat" .
            "ed\": \"2020-02-03T17:23:49Z\",\r\n          \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI" .
            "6ZmFsc2UsImNyaXQiOlsiYjY0Il19..AUQ3AJ23WM5vMOWNtYKuqZBekRAOUibOMH9XuvOd39my1sO-X9R4" .
            "QyAXLD2ospssLvIuwmQVhJa-F0xMOnkvBg\",\r\n          \"proofPurpose\": \"assertionMet" .
            "hod\",\r\n          \"verificationMethod\": \"https://example.edu/issuers/keys/1\"" .
            "\r\n        }\r\n      }\r\n    ],\r\n    \"id\": \"ebc6f1c2\",\r\n    \"holder\": " .
            "\"did:example:7564cb9c-165c-4857-a887-bfc2460af867\",\r\n    \"proof\": {\r\n      " .
            "\"type\": \"Ed25519Signature2018\",\r\n      \"created\": \"2019-02-03T17:23:49Z\"," .
            "\r\n      \"challenge\": \"12ec21\",\r\n      \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NC" .
            "I6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZO4Lkq8-fOruE4oUvuMaxepGX-vLD2gPyNIsz-iA7X0tzC3_96d" .
            "jaBYDxxl6wD1xKrx0h60NjI9i9p_MxoXkDQ\",\r\n      \"proofPurpose\": \"authentication" .
            "\",\r\n      \"verificationMethod\": \"https://example.edu/issuers/keys/1\"\r\n    " .
            "}\r\n  },\r\n  \"json_second\": {\r\n    \"@context\": [\r\n      \"https://www.w3." .
            "org/2018/credentials/v1\",\r\n      \"https://www.w3.org/2018/credentials/examples/" .
            "v1\"\r\n    ],\r\n    \"type\": [\r\n      \"VerifiablePresentation\"\r\n    ],\r\n" .
            "    \"verifiableCredential\": [\r\n      {\r\n        \"@context\": [\r\n          " .
            "\"https://www.w3.org/2018/credentials/v1\",\r\n          \"https://www.w3.org/2018/" .
            "credentials/examples/v1\"\r\n        ],\r\n        \"id\": \"http://example.edu/cre" .
            "dentials/1872\",\r\n        \"type\": [\r\n          \"VerifiableCredential\",\r\n " .
            "         \"DrivingLicenseCredential\"\r\n        ],\r\n        \"issuer\": \"Govern" .
            "ment Of India\",\r\n        \"issuanceDate\": \"2010-01-01T19:23:24Z\",\r\n        " .
            "\"credentialSubject\": {\r\n          \"id\": \"did:example:ebfeb1f712ebc6f1c276e12" .
            "ec21\",\r\n          \"License\": {\r\n            \"type\": \"Driving License\",\r" .
            "\n            \"DLNumber\": \"UPABHISHEK16AX6539\"\r\n          }\r\n        },\r\n" .
            "        \"proof\": {\r\n          \"type\": \"Ed25519Signature2018\",\r\n          " .
            "\"created\": \"2020-02-03T17:23:49Z\",\r\n          \"jws\": \"eyJhbGciOiJFZERTQSIs" .
            "ImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..AUQ3AJ23WM5vMOWNtYKuqZBekRAOUibOMH9XuvOd39my1" .
            "sO-X9R4QyAXLD2ospssLvIuwmQVhJa-F0xMOnkvBg\",\r\n          \"proofPurpose\": \"asser" .
            "tionMethod\",\r\n          \"verificationMethod\": \"https://example.edu/issuers/ke" .
            "ys/1\"\r\n        }\r\n      }\r\n    ],\r\n    \"id\": \"ebc6f1c2\",\r\n    \"hold" .
            "er\": \"did:example:7564cb9c-165c-4857-a887-bfc2460af867\",\r\n    \"proof\": {\r\n" .
            "      \"type\": \"Ed25519Signature2018\",\r\n      \"created\": \"2019-02-03T17:23:" .
            "49Z\",\r\n      \"challenge\": \"12ec21\",\r\n      \"jws\": \"eyJhbGciOiJFZERTQSIs" .
            "ImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZO4Lkq8-fOruE4oUvuMaxepGX-vLD2gPyNIsz-iA7X0tz" .
            "C3_96djaBYDxxl6wD1xKrx0h60NjI9i9p_MxoXkDQ\",\r\n      \"proofPurpose\": \"authentic" .
            "ation\",\r\n      \"verificationMethod\": \"https://example.edu/issuers/keys/1\"\r" .
            "\n    }\r\n  }\r\n}",
            Models\JsonCompareRequest::class
        );

        // Perform API call
        try {
            self::$controller->jsonCompare($body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testQRCode()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"name\": \"Employee Name\",\r\n  \"age\": 27,\r\n  \"department\": \"Polic" .
            "e\",\r\n  \"id\": \"aisuoiqu3234738jdhf100223\"\r\n}",
            Models\QRCodeRequest::class
        );

        // Perform API call
        try {
            self::$controller->qRCode($body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }
}
