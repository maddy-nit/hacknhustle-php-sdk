<?php

declare(strict_types=1);

/*
 * HackNHustleIONDIDLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace HackNHustleIONDIDLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use CoreInterfaces\Core\Request\RequestMethod;
use HackNHustleIONDIDLib\Exceptions\ApiException;
use HackNHustleIONDIDLib\Models\CreateSignRequest;
use HackNHustleIONDIDLib\Models\JsonCompareRequest;
use HackNHustleIONDIDLib\Models\QRCodeRequest;
use HackNHustleIONDIDLib\Models\VerifySignRequest;

class MiscController extends BaseController
{
    /**
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createDid(): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/create-did');

        $this->execute($_reqBuilder);
    }

    /**
     * @param string $did
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function resolveDid(string $did): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/resolve-did')
            ->parameters(QueryParam::init('did', $did));

        $this->execute($_reqBuilder);
    }

    /**
     * @param string $signature
     * @param VerifySignRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function verifySign(string $signature, VerifySignRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/verify-signature')
            ->parameters(QueryParam::init('signature', $signature), BodyParam::init($body));

        $this->execute($_reqBuilder);
    }

    /**
     * @param CreateSignRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createSign(CreateSignRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/create-signature')
            ->parameters(BodyParam::init($body));

        $this->execute($_reqBuilder);
    }

    /**
     * @param string $signature
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function signatureParser(string $signature): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/signature-parser')
            ->parameters(QueryParam::init('signature', $signature));

        $this->execute($_reqBuilder);
    }

    /**
     * @param JsonCompareRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function jsonCompare(JsonCompareRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/json-compare')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $this->execute($_reqBuilder);
    }

    /**
     * @param QRCodeRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function qRCode(QRCodeRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/qr-code')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $this->execute($_reqBuilder);
    }
}
