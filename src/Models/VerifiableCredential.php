<?php

declare(strict_types=1);

/*
 * HackNHustleIONDIDLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace HackNHustleIONDIDLib\Models;

use stdClass;

class VerifiableCredential implements \JsonSerializable
{
    /**
     * @var string[]
     */
    private $context;

    /**
     * @var string
     */
    private $id;

    /**
     * @var string[]
     */
    private $type;

    /**
     * @var string
     */
    private $issuer;

    /**
     * @var string
     */
    private $issuanceDate;

    /**
     * @var CredentialSubject
     */
    private $credentialSubject;

    /**
     * @var Proof
     */
    private $proof;

    /**
     * @param string[] $context
     * @param string $id
     * @param string[] $type
     * @param string $issuer
     * @param string $issuanceDate
     * @param CredentialSubject $credentialSubject
     * @param Proof $proof
     */
    public function __construct(
        array $context,
        string $id,
        array $type,
        string $issuer,
        string $issuanceDate,
        CredentialSubject $credentialSubject,
        Proof $proof
    ) {
        $this->context = $context;
        $this->id = $id;
        $this->type = $type;
        $this->issuer = $issuer;
        $this->issuanceDate = $issuanceDate;
        $this->credentialSubject = $credentialSubject;
        $this->proof = $proof;
    }

    /**
     * Returns Context.
     *
     * @return string[]
     */
    public function getContext(): array
    {
        return $this->context;
    }

    /**
     * Sets Context.
     *
     * @required
     * @maps @context
     *
     * @param string[] $context
     */
    public function setContext(array $context): void
    {
        $this->context = $context;
    }

    /**
     * Returns Id.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Type.
     *
     * @return string[]
     */
    public function getType(): array
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @required
     * @maps type
     *
     * @param string[] $type
     */
    public function setType(array $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Issuer.
     */
    public function getIssuer(): string
    {
        return $this->issuer;
    }

    /**
     * Sets Issuer.
     *
     * @required
     * @maps issuer
     */
    public function setIssuer(string $issuer): void
    {
        $this->issuer = $issuer;
    }

    /**
     * Returns Issuance Date.
     */
    public function getIssuanceDate(): string
    {
        return $this->issuanceDate;
    }

    /**
     * Sets Issuance Date.
     *
     * @required
     * @maps issuanceDate
     */
    public function setIssuanceDate(string $issuanceDate): void
    {
        $this->issuanceDate = $issuanceDate;
    }

    /**
     * Returns Credential Subject.
     */
    public function getCredentialSubject(): CredentialSubject
    {
        return $this->credentialSubject;
    }

    /**
     * Sets Credential Subject.
     *
     * @required
     * @maps credentialSubject
     */
    public function setCredentialSubject(CredentialSubject $credentialSubject): void
    {
        $this->credentialSubject = $credentialSubject;
    }

    /**
     * Returns Proof.
     */
    public function getProof(): Proof
    {
        return $this->proof;
    }

    /**
     * Sets Proof.
     *
     * @required
     * @maps proof
     */
    public function setProof(Proof $proof): void
    {
        $this->proof = $proof;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['@context']          = $this->context;
        $json['id']                = $this->id;
        $json['type']              = $this->type;
        $json['issuer']            = $this->issuer;
        $json['issuanceDate']      = $this->issuanceDate;
        $json['credentialSubject'] = $this->credentialSubject;
        $json['proof']             = $this->proof;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
