<?php

declare(strict_types=1);

/*
 * HackNHustleIONDIDLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace HackNHustleIONDIDLib\Models;

use stdClass;

class Proof implements \JsonSerializable
{
    /**
     * @var string
     */
    private $type;

    /**
     * @var string
     */
    private $created;

    /**
     * @var string
     */
    private $jws;

    /**
     * @var string
     */
    private $proofPurpose;

    /**
     * @var string
     */
    private $verificationMethod;

    /**
     * @param string $type
     * @param string $created
     * @param string $jws
     * @param string $proofPurpose
     * @param string $verificationMethod
     */
    public function __construct(
        string $type,
        string $created,
        string $jws,
        string $proofPurpose,
        string $verificationMethod
    ) {
        $this->type = $type;
        $this->created = $created;
        $this->jws = $jws;
        $this->proofPurpose = $proofPurpose;
        $this->verificationMethod = $verificationMethod;
    }

    /**
     * Returns Type.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @required
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Created.
     */
    public function getCreated(): string
    {
        return $this->created;
    }

    /**
     * Sets Created.
     *
     * @required
     * @maps created
     */
    public function setCreated(string $created): void
    {
        $this->created = $created;
    }

    /**
     * Returns Jws.
     */
    public function getJws(): string
    {
        return $this->jws;
    }

    /**
     * Sets Jws.
     *
     * @required
     * @maps jws
     */
    public function setJws(string $jws): void
    {
        $this->jws = $jws;
    }

    /**
     * Returns Proof Purpose.
     */
    public function getProofPurpose(): string
    {
        return $this->proofPurpose;
    }

    /**
     * Sets Proof Purpose.
     *
     * @required
     * @maps proofPurpose
     */
    public function setProofPurpose(string $proofPurpose): void
    {
        $this->proofPurpose = $proofPurpose;
    }

    /**
     * Returns Verification Method.
     */
    public function getVerificationMethod(): string
    {
        return $this->verificationMethod;
    }

    /**
     * Sets Verification Method.
     *
     * @required
     * @maps verificationMethod
     */
    public function setVerificationMethod(string $verificationMethod): void
    {
        $this->verificationMethod = $verificationMethod;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['type']               = $this->type;
        $json['created']            = $this->created;
        $json['jws']                = $this->jws;
        $json['proofPurpose']       = $this->proofPurpose;
        $json['verificationMethod'] = $this->verificationMethod;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
