<?php

declare(strict_types=1);

/*
 * HackNHustleIONDIDLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace HackNHustleIONDIDLib\Models;

use stdClass;

class JsonSecond implements \JsonSerializable
{
    /**
     * @var string[]
     */
    private $context;

    /**
     * @var string[]
     */
    private $type;

    /**
     * @var VerifiableCredential[]
     */
    private $verifiableCredential;

    /**
     * @var string
     */
    private $id;

    /**
     * @var string
     */
    private $holder;

    /**
     * @var Proof1
     */
    private $proof;

    /**
     * @param string[] $context
     * @param string[] $type
     * @param VerifiableCredential[] $verifiableCredential
     * @param string $id
     * @param string $holder
     * @param Proof1 $proof
     */
    public function __construct(
        array $context,
        array $type,
        array $verifiableCredential,
        string $id,
        string $holder,
        Proof1 $proof
    ) {
        $this->context = $context;
        $this->type = $type;
        $this->verifiableCredential = $verifiableCredential;
        $this->id = $id;
        $this->holder = $holder;
        $this->proof = $proof;
    }

    /**
     * Returns Context.
     *
     * @return string[]
     */
    public function getContext(): array
    {
        return $this->context;
    }

    /**
     * Sets Context.
     *
     * @required
     * @maps @context
     *
     * @param string[] $context
     */
    public function setContext(array $context): void
    {
        $this->context = $context;
    }

    /**
     * Returns Type.
     *
     * @return string[]
     */
    public function getType(): array
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @required
     * @maps type
     *
     * @param string[] $type
     */
    public function setType(array $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Verifiable Credential.
     *
     * @return VerifiableCredential[]
     */
    public function getVerifiableCredential(): array
    {
        return $this->verifiableCredential;
    }

    /**
     * Sets Verifiable Credential.
     *
     * @required
     * @maps verifiableCredential
     *
     * @param VerifiableCredential[] $verifiableCredential
     */
    public function setVerifiableCredential(array $verifiableCredential): void
    {
        $this->verifiableCredential = $verifiableCredential;
    }

    /**
     * Returns Id.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Holder.
     */
    public function getHolder(): string
    {
        return $this->holder;
    }

    /**
     * Sets Holder.
     *
     * @required
     * @maps holder
     */
    public function setHolder(string $holder): void
    {
        $this->holder = $holder;
    }

    /**
     * Returns Proof.
     */
    public function getProof(): Proof1
    {
        return $this->proof;
    }

    /**
     * Sets Proof.
     *
     * @required
     * @maps proof
     */
    public function setProof(Proof1 $proof): void
    {
        $this->proof = $proof;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['@context']             = $this->context;
        $json['type']                 = $this->type;
        $json['verifiableCredential'] = $this->verifiableCredential;
        $json['id']                   = $this->id;
        $json['holder']               = $this->holder;
        $json['proof']                = $this->proof;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
